service: cloudgto-blog

frameworkVersion: '3'

configValidationMode: error

plugins:
  - serverless-appsync-plugin

provider:
  name: aws
  region: us-east-1

appSync:
  # name of the API
  name: cloudgto-blogs-api

  # log level for API
  logging:
    level: ALL # NONE | ERROR | ALL

  authentication:
    # or API_KEY
    # see https://github.com/sid88in/serverless-appsync-plugin/blob/alpha/doc/authentication.md
    type: AMAZON_COGNITO_USER_POOLS
    config:
      userPoolId: !Ref CognitoUserPool
      defaultAction: ALLOW

  # data sources
  # see https://github.com/sid88in/serverless-appsync-plugin/blob/alpha/doc/dataSources.md
  # We can probably create one for each dynamodb table in the stack
  # or try to deduce them from the resolvers
  dataSources:
    posts:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref Posts

    authors:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref Authors

    comments:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref Comments

  # resolvers
  # see https://github.com/sid88in/serverless-appsync-plugin/blob/alpha/doc/resolvers.md
  # one entry for each Query/Mutation with a data source attached
  resolvers:
    Query.getPost:
      functions:
        - dataSource: posts
          code: resolvers/Query.getPost.js

    Query.getAllPosts:
      functions:
        - dataSource: posts
          code: resolvers/Query.getAllPosts.js

    Query.getPosts:
      functions:
        - dataSource: posts
          code: resolvers/Query.getPosts.js

    Query.getAuthor:
      functions:
        - dataSource: authors
          code: resolvers/Query.getAuthor.js

    Post.comments:
      functions:
        - dataSource: comments
          code: resolvers/Post.comments.js

    Mutation.createPost:
      functions:
        - dataSource: posts
          code: resolvers/Mutation.createPost.js

    Mutation.createAuthor:
      functions:
        - dataSource: authors
          code: resolvers/Mutation.createAuthor.js

    Mutation.createComment:
      functions:
        - dataSource: comments
          code: resolvers/Mutation.createComment.js

    Mutation.updatePost:
      functions:
        - dataSource: posts
          code: resolvers/Mutation.updatePost.js

    Mutation.deletePost:
      functions:
        - dataSource: posts
          code: resolvers/Mutation.deletePost.js

resources:
  Resources:
    Posts:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-posts
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: authorName
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: author
            KeySchema:
              - AttributeName: authorName
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    Authors:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-authors
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH

    Comments:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-comments
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: postId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: post
            KeySchema:
              - AttributeName: postId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: blog
        AliasAttributes:
          - preferred_username
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: Web
        CallbackURLs:
          - https://example.com/signedin
        LogoutURLs:
          - https://example.com/signedout
